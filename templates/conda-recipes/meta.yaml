## For reasonably simple Python packages, the approach based on load_setup_py_data()
## can be used to avoid duplicating dependency lists between setup.py and meta.yaml, e.g. see:
## https://github.com/bokeh/bokeh/blob/master/conda.recipe/meta.yaml
{% set name = "ariba" %}
{% set version = "2.11.1" %}
{% set source_type = "git" %}
{% set git_rev = "ngs-mstb-v.1.2.0" %}
{% set file_ext = "tar.gz" %}
{% set hash_type = "sha256" %}
{% set hash_value = "68b90657a3385c4feb17d55ee0cac4e08ec3f2f968a3547cf926e6e6ff1645e1" %}

## It would be nice to have base template in a separate file
## that gets loaded through Jinja2 `extends` keyword, but Conda
## only allows single-file Jinja2 templates:
## https://github.com/conda/conda-build/issues/2684
##

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  {% if source_type=="git" %}

  git_url: 'https://github.com/ngs-mstb/{{ name }}.git'
  git_rev: '{{ git_rev }}'

  {% elif source_type=="url" %}

  fn: '{{ name }}-{{ version }}.{{ file_ext }}'
  url: 'https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.{{ file_ext }}'
  ## Github-style release acrhive file example
  #url: https://github.com/sanger-pathogens/{{ name }}/archive/v{{ version }}.{{ file_ext }}
  '{{ hash_type }}': '{{ hash_value }}'

  {% else %}

  {{ "Unexpected value of parameter source_type"/0 }}

  {% endif %}

build:
  skip: True # [py27]
  number: 0
  script: |
      #export CFLAGS="-I$PREFIX/include $CFLAGS"
      #export CXXFLAGS="-I$PREFIX/include $CXXFLAGS"
      #export LDFLAGS="-L$PREFIX/lib $LDFLAGS"
      #export CPATH="${PREFIX}/include $CPATH"
      $PYTHON setup.py install --single-version-externally-managed --record=record.txt
  run_exports:
    {% set build_deps %}
    - python
    - setuptools
    - beautifulsoup4 >=4.1.0
    - dendropy >=4.2.0
    - matplotlib
    - pyfastaq >=3.12.0
    - pysam >=0.9.1
    - pymummer >=0.10.2
    - zlib {{ CONDA_ZLIB }}*
    {% endset %}
requirements:
    ## Tried `build: run_exports` available in conda-build v.3 new features,
    ## but it did not add anything either to `build` or `run`, contrary to docs (which are sparse).
    ## Putting stuff only into `host` section was also ignored during build.
    ## Putting stuff only into `build` resulted in <zlib.h> not found even when adding
    ## extra envars in the build script, and zlib getting installed into the build environment.
    ## Using jinja2 block variable set-endset to add things to both `run`, `build` and `host`.
  build:
    ## this ends up adding compilers to build and relevant libs to run
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    {{ build_deps }}
  host:
    {{ build_deps }}
  run: 
    {{ build_deps }}
    - bowtie2 >=2.3.1
    - cd-hit >=4.6.5
    - samtools >=1.2
    - bcftools >=1.2
    - mummer >=3.23
    - spades >=3.5.0
test:
  imports:
    - ariba
    - ariba.tasks
  requires:
    - nose >=1.3

about:
  home: https://github.com/sanger-pathogens/ariba
  license: GNU General Public License v3 (GPLv3)
  license_family: GPL3
  license_file: ''
  summary: 'ARIBA: Antibiotic Resistance Identification By Assembly'
  description: ''
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: ''
